# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
# This uses an action (hashicorp/ghaction-import-gpg) that assumes you set your 
# private key in the `GPG_PRIVATE_KEY` secret and passphrase in the `PASSPHRASE`
# secret. If you would rather own your own GPG handling, please fork this action
# or use an alternative one for key handling.
#
# You will need to pass the `--batch` flag to `gpg` in your signing step 
# in `goreleaser` to indicate this is being used in a non-interactive mode.
#
name: release
on:
  push:
    tags:
      - 'v*'
jobs:
  build-linux-and-darwin:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2.3.4
      -
        name: Unshallow
        run: git fetch --prune --unshallow
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      -
        name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5.0.0
        with: 
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      -
        name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2.5.0
        with:
          version: latest
          args: release --rm-dist
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          # GitHub sets this automatically
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  build-windows:
    runs-on: windows-latest
    environment: prod
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2.3.4
      -
        name: Unshallow
        run: git fetch --prune --unshallow
      -
        name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      -
       name: Build
       run: go build .
      -
       name: Sign
       uses: "InertiaSystems/code-sign-action@v1.1.0"
       with:
        certificate: '${{ secrets.CSR_CERTIFICATE }}'
        password: '${{secrets.CERTPASS}}'
        certificatesha1: '${{secrets.CERTHASH}}'
        certificatename: '${{ secrets.CERTNAME }}'
        timestampUrl: 'http://timestamp.sectigo.com'
        folder: '.'
        recursive: false
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF_NAME | cut -c 2-)
      -
        name: Create Archive
        uses: TheDoctor0/zip-release@0.6.1
        with:
          type: 'zip'
          path: '*.exe'
          filename: 'terraform-provider-metalcloud_${{steps.get_version.outputs.VERSION}}_windows_amd64-signed.zip'
          exclusions: '*.git* /*node_modules/* .editorconfig'
      -
        name: Upload Release
        uses: ncipollo/release-action@v1
        with:
            artifacts: 'terraform-provider-metalcloud_${{ steps.get_version.outputs.VERSION }}_windows_amd64-signed.zip'
            token: ${{ secrets.GITHUB_TOKEN }}
            allowUpdates: true
